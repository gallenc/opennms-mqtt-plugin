# Configuration for the opennms mqtt client
# org.opennms.plugin.mqttclient.cfg

# brokerUrl. url of broker to connect to. the Paho client supports two types of connection 
# tcp:// for a TCP connection and ssl:// for a TCP connection secured by SSL/TLS. 
# For example: tcp://localhost:1883 or ssl://localhost:8883

org.opennms.plugin.mqttclient.brokerUrl=tcp://localhost:1883

# clientId. Note that this must be a unique id from the point of view of the broker
org.opennms.plugin.mqttclient.clientId=opennms


# userName to connect to the broker. If left empty anonymous connection will be attempted
org.opennms.plugin.mqttclient.userName=mqtt-user


# password to connect to the broker. If left empty a password will not be sent
org.opennms.plugin.mqttclient.password=mqtt-password


# If opennms fails to connect to the broker, interval (ms) before re attempting connection
org.opennms.plugin.mqttclient.connectionRetryInterval=30000


# Qos of connection to event and data topics
org.opennms.plugin.mqttclient.qos=0


# Topic on which OpenNMS will listen for mqtt messages to be turned into events
org.opennms.plugin.mqttclient.eventtopic=mqtt-events


# Topic on which OpenNMS will listen for mqtt messages to be turned into performance data
org.opennms.plugin.mqttclient.datatopic=mqtt-data


# foreignsource. When OpenNMS receives a message it will try and match it against a node with this foreign source
org.opennms.plugin.mqttclient.message.foreignsource=mqtt


# foreignidkey. If the mqtt payload is json, OpenNMS will look for the foreignID of the node in the json field with this key
org.opennms.plugin.mqttclient.message.foreignidkey=id


# timestampkey. If the mqtt payload is json, OpenNMS will look for the timestamp of the message in the json field with this key
# if empty string then current date will be used
org.opennms.plugin.mqttclient.message.timestampkey=time


# time format pattern. Determines how json date time is interpreted  
# yyyy-MM-dd HH:mm:ss.SSSSSS works with 2017-10-19 10:15:02.854888
# see https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html#patterns for other examples
org.opennms.plugin.mqttclient.message.time-format-pattern=yyyy-MM-dd HH:mm:ss.SSSSSS


# time zone offset used by time received in message
# see https://docs.oracle.com/javase/8/docs/api/java/time/ZoneOffset.html#of-java.lang.String-  for other examples
# set to empty property = use local time zone
org.opennms.plugin.mqttclient.message.time-zone-offset=


# OpenNMS can turn performance data values into guages, counters or strings
# each of the guagekeys, counterkeys and stringkeys properties can contain a comma separated list of keys to look for in the json message
# the corresponding value will be parsed as a guage, counter or string value

org.opennms.plugin.mqttclient.message.persist.guagekeys=PM1,PM25,PM10,latitude,longitude,averaging
org.opennms.plugin.mqttclient.message.persist.counterkeys=
org.opennms.plugin.mqttclient.message.persist.stringkeys=


# The group name under which these measurements will be stored
org.opennms.plugin.mqttclient.message.persist.group=sniffy


# These interval and RRA definitions are always needed but primarily apply if data is stored in rrd files
# As with rrd definitions the interval sets the time interval in seconds between collections (300 = 5 mins)
org.opennms.plugin.mqttclient.message.persist.interval=300


# the RRA definitions are by default matching the stock definitions in OpenNMS
org.opennms.plugin.mqttclient.message.persist.rras=RRA:AVERAGE:0.5:1:2016,RRA:AVERAGE:0.5:12:1488,RRA:AVERAGE:0.5:288:366,RRA:MAX:0.5:288:366,RRA:MIN:0.5:288:366

