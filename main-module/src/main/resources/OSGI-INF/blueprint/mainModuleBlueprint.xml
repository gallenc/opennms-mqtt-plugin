<blueprint xmlns="http://www.osgi.org/xmlns/blueprint/v1.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:cm="http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0"
  xmlns:ext="http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0"
  xsi:schemaLocation="
		http://www.osgi.org/xmlns/blueprint/v1.0.0
		http://www.osgi.org/xmlns/blueprint/v1.0.0/blueprint.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-cm/v1.1.0
		http://aries.apache.org/schemas/blueprint-cm/blueprint-cm-1.1.0.xsd
		
		http://aries.apache.org/blueprint/xmlns/blueprint-ext/v1.1.0
		http://aries.apache.org/schemas/blueprint-ext/blueprint-ext-1.1.xsd
">

  <!-- Used for system properties -->
  <ext:property-placeholder placeholder-prefix="$[" placeholder-suffix="]" />

  <!-- opennms services -->
  <reference id="eventProxy" interface="org.opennms.netmgt.events.api.EventProxy" availability="mandatory" timeout="100" />

  <bean id="eventIpcManager" class="org.opennms.netmgt.events.api.EventIpcManagerFactory" factory-method="getIpcManager" />

  <reference id="nodeDao" interface="org.opennms.netmgt.dao.api.NodeDao" availability="mandatory" />

  <reference id="ipInterfaceDao" interface="org.opennms.netmgt.dao.api.IpInterfaceDao" availability="mandatory" />

  <reference id="assetRecordDao" interface="org.opennms.netmgt.dao.api.AssetRecordDao" availability="mandatory" />

  <reference id="transactionOperations" interface="org.springframework.transaction.support.TransactionOperations" availability="mandatory" />

  <reference id="monitoringLocationDao" interface="org.opennms.netmgt.dao.api.MonitoringLocationDao" availability="mandatory" />

  <reference id="persisterFactory" interface="org.opennms.netmgt.collection.api.PersisterFactory" availability="mandatory" />

  <!-- print startup message to karaf console -->
  <bean id="sayHello" class="org.opennms.plugins.mqtt.SayHello" destroy-method="destroyMethod">
  </bean>

  <!-- this bean is initialised by controller -->
  <bean id="nodeByForeignSourceCache" class="org.opennms.plugins.persistor.NodeByForeignSourceCacheImpl" destroy-method="destroy">
    <property name="nodeDao" ref="nodeDao" />
    <property name="monitoringLocationDao" ref="monitoringLocationDao" />
    <property name="ipInterfaceDao" ref="ipInterfaceDao" />
    <property name="assetRecordDao" ref="assetRecordDao" />
    <property name="eventProxy" ref="eventProxy" />
    <property name="eventIpcManager" ref="eventIpcManager" />
    <property name="transactionOperations" ref="transactionOperations" />
    <!-- <property name="MAX_TTL" value="${org.opennms.plugin.mqttclient.cache_max_ttl}" /> -->
    <!-- <property name="MAX_SIZE" value="${org.opennms.plugin.mqttclient.cache_max_size}" /> -->
    <!-- <property name="createMissingNodes" value="${org.opennms.plugin.mqttclient.create-missing-nodes}" /> -->
    <!-- <property name="createDummyInterfaces" value="${org.opennms.plugin.mqttclient.create-dummy-interfaces}" /> -->
    <!-- <property name="createNodeAssetData" value="${org.opennms.plugin.mqttclient.create-node-asset-data}" /> -->
  </bean>

  <bean id="eventPersistor" class="org.opennms.plugins.persistor.eventnotifier.EventPersistorImpl">
    <property name="eventProxy" ref="eventProxy" />
    <property name="nodeByForeignSourceCache" ref="nodeByForeignSourceCache" />
  </bean>

  <bean id="dataPersistor" class="org.opennms.plugins.persistor.datanotifier.DataPersistorImpl">
    <property name="nodeByForeignSourceCache" ref="nodeByForeignSourceCache" />
    <property name="persisterFactory" ref="persisterFactory" /> 
  </bean>

  <!-- this bean is initialised by controller -->
  <bean id="notificationMessageHandler" class=" org.opennms.plugins.messagehandler.NotificationMessageHandler" destroy-method="destroy">
    <property name="dataPersistor" ref="dataPersistor" />
    <property name="eventPersistor" ref="eventPersistor" />
  </bean>

  <!-- this bean is initialised by controller -->
  <bean id="messageQueue" class="org.opennms.plugins.messagenotifier.MessageNotificationClientQueueImpl" destroy-method="destroy">
    <property name="outgoingNotificationHandlingClients">
      <list>
        <ref component-id="notificationMessageHandler" />
      </list>
    </property>
  </bean>

  <bean id="controller" class="org.opennms.plugins.mqtt.Controller" init-method="init" destroy-method="destroy">
    <property name="configFile" value="$[karaf.etc]$[file.separator]mqtt-interface-config.xml" />
    <property name="nodeByForeignSourceCacheImpl" ref="nodeByForeignSourceCache" />
    <property name="notificationMessageHandler" ref="notificationMessageHandler" />
    <property name="messageNotificationClientQueueImpl" ref="messageQueue" />
    <property name="messageReceiverServices">
      <list>
        <ref component-id="mqttRxService" />
      </list>
    </property>
  </bean>

  <!-- this bean is initialised by controller -->
  <bean id="mqttRxService" class="org.opennms.plugins.messagenotifier.rest.MqttRxServiceImpl">
    <property name="clientInstanceId" value="opennms-rest-client" />
    <property name="clientType" value="opennms-rest-client" />

    <!-- now configured in controller -->
    <!-- <property name="topicList"> -->
    <!-- <list> -->
    <!-- <bean class="org.opennms.plugins.messagenotifier.mqttclient.MQTTTopicSubscription"> -->
    <!-- <property name="qos" value="${org.opennms.plugin.mqttclient.qos}" /> -->
    <!-- <property name="topic" value="${org.opennms.plugin.mqttclient.eventtopic}" /> -->
    <!-- </bean> -->
    <!-- <bean class="org.opennms.plugins.messagenotifier.mqttclient.MQTTTopicSubscription"> -->
    <!-- <property name="qos" value="${org.opennms.plugin.mqttclient.qos}" /> -->
    <!-- <property name="topic" value="${org.opennms.plugin.mqttclient.datatopic}" /> -->
    <!-- </bean> -->
    <!-- </list> -->
    <!-- </property> -->
  </bean>

  <bean id="mqttRestApplication" class="org.opennms.plugins.messagenotifier.rest.MqttRestApplication" destroy-method="destroyMethod" />

  <!-- constructor public ServiceLoader(MqttService mqttService) -->
  <bean id="serviceLoader" class="org.opennms.plugins.messagenotifier.rest.ServiceLoader">
    <argument index="0" ref="mqttRxService" />
  </bean>

  <!-- ReST Servelet configuration for jersey. Service will be at /opennms/plugin/mqtt/v1-0/postmessage/0/mqtt-events -->
  <!-- where resource identifier is /postmessage/<QOS>/TOPIC... and TOPIC is a topic path e.g. /postmessage/0/foo/barr  -->
  <service interface="javax.servlet.http.HttpServlet">
    <service-properties>
      <entry key="alias" value="/plugin/mqtt/v1-0" />
    </service-properties>
    <bean class="com.sun.jersey.spi.container.servlet.ServletContainer">
      <argument ref="mqttRestApplication" />
    </bean>
  </service>

  <!-- used for testing only -->
  <!-- <bean id="verySimpleClient" class="org.opennms.plugins.dbnotifier.VerySimpleNotificationClient" /> -->


</blueprint>
